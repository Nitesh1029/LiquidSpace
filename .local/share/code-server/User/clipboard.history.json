{
  "version": 2,
  "clips": [
    {
      "value": "coder port-forward nitesh/fastapi.main --tcp 3000",
      "createdAt": 1710915028139,
      "copyCount": 3,
      "useCount": 0,
      "flagged": false
    },
    {
      "value": "",
      "createdAt": 1706013698159,
      "copyCount": 1264,
      "useCount": 1258,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 81,
            "character": 32
          },
          "end": {
            "line": 81,
            "character": 32
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-render/src/components/table/columnFilter.tsx"
      }
    },
    {
      "value": "PS C:\\Users\\Dell\\space\\storewise-space> git push -u origin main\r\ninfo: please complete authentication in your browser...\r\nEnumerating objects: 29, done.\r\nCounting objects: 100% (29/29), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (28/28), done.\r\nWriting objects: 100% (29/29), 242.14 KiB | 5.38 MiB/s, done.\r\nTotal 29 (delta 0), reused 0 (delta 0), pack-reused 0\r\nTo https://github.com/Nitesh1029/LiquidSpace.git\r\n * [new branch]      main -> main\r\nbranch 'main' set up to track 'origin/main'.",
      "createdAt": 1710914112419,
      "copyCount": 2,
      "useCount": 0,
      "language": "log",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 0
          }
        },
        "uri": "output:vscode.git.Git"
      },
      "flagged": true
    },
    {
      "value": "coder port-forward nitesh/fastapi.main --tcp 3000\r\n",
      "createdAt": 1709277354131,
      "copyCount": 9,
      "useCount": 8,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 64,
            "character": 52
          },
          "end": {
            "line": 64,
            "character": 52
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/_components/map-viewer.tsx"
      }
    },
    {
      "value": "function handleFormSubmit(event){\n    event.preventDefault();\n  \n    const userN=event.target.username.value;\n    const emailId=event.target.email.value;\n    const phn=event.target.phone.value;\n  \n    var obj={\n      username: userN,\n      email: emailId,\n      phone: phn\n    };\n  \n  localStorage.setItem('UserDetails', JSON.stringify(obj));\n\n  updateScreen(obj);\n  \n  };\n\nfunction updateScreen(obj){\n    var orderedList=document.getElementById('userDet');\n  \n    var li=document.createElement('li');\n      li.textContent=`Username: ${obj.username}, Email: ${obj.email}, Phone: ${obj.phone}`;\n      orderedList.appendChild(li);\n  \n};\n\n\n  ",
      "createdAt": 1710149862491,
      "copyCount": 3,
      "useCount": 3
    },
    {
      "value": "You can start by creating a very simple ReactResizablePanel where each panel can be given a list of data, and onSelecting, it can change the options displayed on the other panels \r\nThe data needs to be like an accordion.\r\n\r\nLet me know if you want my help with creating a basic structure in the repo? ",
      "createdAt": 1710147397824,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescript",
      "createdLocation": {
        "range": {
          "start": {
            "line": 6,
            "character": 0
          },
          "end": {
            "line": 6,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-internal/lib/utils.ts"
      }
    },
    {
      "value": "<animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>",
      "createdAt": 1709974989496,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 393,
            "character": 18
          },
          "end": {
            "line": 393,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{currentStep === 4 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}",
      "createdAt": 1709973822777,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 168,
            "character": 16
          },
          "end": {
            "line": 205,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "import { Flex, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n    ) => {\r\n      const selectedValue = event.target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={option.value}\r\n                    name={name}\r\n                    readOnly={false}\r\n                    value={option.value}\r\n                    checked={field.value === option.value}\r\n                    onClick={(e) => handleRadioChange(e, name)}\r\n                  />\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n  customInput: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions = [\r\n    //1\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //2\r\n    { key: '_____', value: '_____' },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //3\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Improved Inventory management',\r\n      value: 'Cost Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //4\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n    //5\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //6\r\n    { key: '_____', value: '_____' },\r\n    //7\r\n    { key: 'CCTV surveillance', value: 'CCTV surveillance' },\r\n    {\r\n      key: 'Stock maintenance',\r\n      value: 'Stock maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly reconciliation',\r\n      value: 'Monthly reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const options1 = radioOptions.slice(0, 5);\r\n  const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return { ...option, isCustomInput: true };\r\n    }\r\n    return option;\r\n  });\r\n  const options3 = radioOptions.slice(10, 15);\r\n  const options4 = radioOptions.slice(15, 20);\r\n  const options5 = radioOptions.slice(20, 25);\r\n  const options6 = radioOptions.slice(25, 26);\r\n  const options7 = radioOptions.slice(26, 32);\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n    customInput: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: (reachOut: string) => reachOut === 'true',\r\n        then: Yup.string()\r\n          .required('Email is required')\r\n          .test('is-valid', 'Invalid email address', (value) =>\r\n            value ? isEmailValidator(value) : true,\r\n          ) as any,\r\n      }),\r\n    customInput: Yup.string().when(['reachOut', 'radioOption'], {\r\n      is: (values: string[]) => values[0] === 'true' && values[1] === 'others',\r\n      then: Yup.string().required('Custom input is required') as any,\r\n    }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={options1}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={options2}\r\n                      />\r\n                    </animated.span>\r\n                    {/* {values.radioOption === 'others' && values.reachOut === 'true' && (\r\n                      <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                        <Field\r\n                          as={Input}\r\n                          render={({ field }) => (\r\n                            <Input\r\n                              {...field}\r\n                              type=\"text\"\r\n                              _focusVisible={{ borderWidth: 0 }}\r\n                              borderWidth={0}\r\n                              color=\"white\"\r\n                              width={{ base: '400px', md: '700px' }}\r\n                              height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                              fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                              placeholder=\"Enter your custom input here\"\r\n                            />\r\n                          )}\r\n                          type=\"text\"\r\n                          name=\"customInput\"\r\n                        />\r\n                        {touched.customInput && errors.customInput && (\r\n                          <ErrorMessage component=\"div\" name=\"customInput\" />\r\n                        )}\r\n                        {!errors.customInput && (\r\n                          <Text color={'#eeeee4'}>\r\n                            That looks good! Press <b>Enter</b> to submit\r\n                          </Text>\r\n                        )}\r\n                      </Flex>\r\n                    )} */}\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirement From a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirements for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={options5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={options6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenties\"\r\n                        name=\"radioOption\"\r\n                        options={options7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewForm;\r\n",
      "createdAt": 1709973151965,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 393,
            "character": 48
          },
          "end": {
            "line": 393,
            "character": 48
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n  const [inputVal, setInputVal] = useState('');\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions = [\r\n    //1\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //2\r\n    { key: '_____', value: '_____' },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //3\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Improved Inventory management',\r\n      value: 'Cost Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //4\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n    //5\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //6\r\n    { key: '_____', value: '_____' },\r\n    //7\r\n    { key: 'CCTV surveillance', value: 'CCTV surveillance' },\r\n    {\r\n      key: 'Stock maintenance',\r\n      value: 'Stock maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly reconciliation',\r\n      value: 'Monthly reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const options1 = radioOptions.slice(0, 5).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options3 = radioOptions.slice(10, 15).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options4 = radioOptions.slice(15, 20);\r\n  const options5 = radioOptions.slice(20, 25).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options6 = radioOptions.slice(25, 26).map((option) => {\r\n    return {\r\n      ...option,\r\n      isCustomInput: true,\r\n      onclick: () => setInputVal(option.value),\r\n    };\r\n  });\r\n  const options7 = radioOptions.slice(26, 32);\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={options1}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={options2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirement From a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirements for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={options5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={options6}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            incrementStep();\r\n                          }\r\n                        }}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenties\"\r\n                        name=\"radioOption\"\r\n                        options={options7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default NewForm;\r\n",
      "createdAt": 1709972006509,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 443,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "onKeyDown={onKeyDown}",
      "createdAt": 1709971857334,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 82,
            "character": 22
          },
          "end": {
            "line": 82,
            "character": 43
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            incrementStep();\r\n                          }\r\n                        }}",
      "createdAt": 1709971525741,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 368,
            "character": 24
          },
          "end": {
            "line": 373,
            "character": 26
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={options6}\r\n                        onKeyDown={(e) => {\r\n                          if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            incrementStep();\r\n                          }\r\n                        }}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}",
      "createdAt": 1709970971850,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 361,
            "character": 16
          },
          "end": {
            "line": 377,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n  const [inputVal, setInputVal] = useState('');\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions = [\r\n    //1\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //2\r\n    { key: '_____', value: '_____' },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //3\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Improved Inventory management',\r\n      value: 'Cost Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //4\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n    //5\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //6\r\n    { key: '_____', value: '_____' },\r\n    //7\r\n    { key: 'CCTV surveillance', value: 'CCTV surveillance' },\r\n    {\r\n      key: 'Stock maintenance',\r\n      value: 'Stock maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly reconciliation',\r\n      value: 'Monthly reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const options1 = radioOptions.slice(0, 5).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options3 = radioOptions.slice(10, 15).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options4 = radioOptions.slice(15, 20);\r\n  const options5 = radioOptions.slice(20, 25).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });\r\n  const options6 = radioOptions.slice(25, 26).map((option) => {\r\n    return {\r\n      ...option,\r\n      isCustomInput: true,\r\n      onclick: () => setInputVal(option.value),\r\n    };\r\n  });\r\n  const options7 = radioOptions.slice(26, 32);\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={options1}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={options2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirement From a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirements for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={options5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={options6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenties\"\r\n                        name=\"radioOption\"\r\n                        options={options7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default NewForm;\r\n",
      "createdAt": 1709970184635,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 437,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": ".map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return {\r\n        ...option,\r\n        isCustomInput: true,\r\n        onclick: () => setInputVal(option.value),\r\n      };\r\n    }\r\n    return option;\r\n  });",
      "createdAt": 1709969495499,
      "copyCount": 3,
      "useCount": 3,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 176,
            "character": 44
          },
          "end": {
            "line": 185,
            "character": 5
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{option.isCustomInput ? (\r\n                    <input\r\n                      value={inputVal}\r\n                      onChange={() => setInputVal()}\r\n                      // placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name, option.isCustomInput)}\r\n                      style={{ marginRight: '8px' }}\r\n                    />",
      "createdAt": 1709968970567,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 77,
            "character": 18
          },
          "end": {
            "line": 94,
            "character": 22
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "| React.MouseEvent<HTMLInputElement>",
      "createdAt": 1709967442787,
      "copyCount": 5,
      "useCount": 5,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 76,
            "character": 17
          },
          "end": {
            "line": 76,
            "character": 17
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "import { Flex, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback, useState } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n  const [inputVal, setInputVal] = useState('');\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n      isCustomInput?: boolean,\r\n    ) => {\r\n      const selectedValue = (event as React.ChangeEvent<HTMLInputElement>).target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n\r\n      if (isCustomInput) {\r\n        setInputVal(selectedValue);\r\n      }\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                >\r\n                  {/* <input\r\n                    type=\"radio\"\r\n                    id={option.value}\r\n                    name={name}\r\n                    readOnly={false}\r\n                    value={option.value}\r\n                    checked={field.value === option.value}\r\n                    onClick={(e) => handleRadioChange(e, name)}\r\n                  /> */}\r\n                  {option.isCustomInput ? (\r\n                    <input\r\n                      value={inputVal}\r\n                      onChange={() => setInputVal()}\r\n                      placeholder=\"Enter\"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name, option.isCustomInput)}\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n",
      "createdAt": 1709966799406,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 142,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "Cannot read properties of null (reading 'addEventListener')",
      "createdAt": 1709966054801,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 3,
            "character": 19
          },
          "end": {
            "line": 3,
            "character": 19
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "// ... (other imports and code)\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n  const [inputVals, setInputVals] = useState<{ [key: string]: string }>({});\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n      isCustomInput?: boolean,\r\n    ) => {\r\n      const selectedValue = (event as React.ChangeEvent<HTMLInputElement>).target.value;\r\n\r\n      if (isCustomInput) {\r\n        setInputVals((prevInputVals) => ({\r\n          ...prevInputVals,\r\n          [fieldName]: selectedValue,\r\n        }));\r\n        await setFieldValue(fieldName, selectedValue);\r\n        const inputField = document.getElementById(`${fieldName}-input`);\r\n        if (inputField) {\r\n          inputField.focus();\r\n        }\r\n      } else {\r\n        setInputVals((prevInputVals) => ({\r\n          ...prevInputVals,\r\n          [fieldName]: '',\r\n        }));\r\n        await setFieldValue(fieldName, selectedValue);\r\n      }\r\n\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n\r\n  return (\r\n    <Flex className=\"form-control\" textAlign={'center'} direction=\"column\" gap=\"2rem\" paddingX=\"1rem\">\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              const isCustomInput = option.isCustomInput;\r\n              const customInputVal = isCustomInput ? inputVals[option.value] || '' : '';\r\n\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                  onClick={() =>\r\n                    handleRadioChange(\r\n                      { target: { value: option.value } } as any,\r\n                      option.value,\r\n                      isCustomInput,\r\n                    )\r\n                  }\r\n                >\r\n                  {isCustomInput ? (\r\n                    <input\r\n                      id={`${option.value}-input`}\r\n                      value={customInputVal}\r\n                      onChange={(e) =>\r\n                        setInputVals((prevInputVals) => ({\r\n                          ...prevInputVals,\r\n                          [option.value]: e.target.value,\r\n                        }))\r\n                      }\r\n                      placeholder={option.key}\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) =>\r\n                        handleRadioChange(e, option.value, isCustomInput)\r\n                      }\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n",
      "createdAt": 1709911562951,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 12,
            "character": 2
          },
          "end": {
            "line": 12,
            "character": 2
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "  await setFieldValue(fieldName, selectedValue);",
      "createdAt": 1709910975991,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 39,
            "character": 4
          },
          "end": {
            "line": 39,
            "character": 4
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "import { Flex, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback, useState } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n  const [inputVal, setInputVal] = useState('');\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n      isCustomInput?: boolean,\r\n    ) => {\r\n      const selectedValue = (event as React.ChangeEvent<HTMLInputElement>).target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n\r\n      if (isCustomInput) {\r\n        setInputVal(selectedValue);\r\n        const inputField = document.getElementById(`${fieldName}-input`);\r\n        if (inputField) {\r\n          inputField.focus();\r\n        }\r\n      }\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                  onClick={() => option.onClick && option.onClick()}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={option.value}\r\n                    name={name}\r\n                    readOnly={false}\r\n                    value={option.value}\r\n                    checked={field.value === option.value}\r\n                    onClick={(e) => handleRadioChange(e, name)}\r\n                  />\r\n                  {option.isCustomInput ? (\r\n                    <input\r\n                      value={inputVal}\r\n                      onChange={(e) => setInputVal(e.target.value)}\r\n                      // placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name, option.isCustomInput)}\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n",
      "createdAt": 1709910837313,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 147,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "await setFieldValue(fieldName, selectedValue);",
      "createdAt": 1709910350234,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 40,
            "character": 6
          },
          "end": {
            "line": 40,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "| React.MouseEvent<HTMLInputElement>,",
      "createdAt": 1709910011258,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 41,
            "character": 0
          },
          "end": {
            "line": 41,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "\r\n                  {option.isCustomInput ? (\r\n                    <input\r\n                      value={inputVal}\r\n                      onChange={(e) => setInputVal(e.target.value)}\r\n                      // placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name, option.isCustomInput)}\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  )}",
      "createdAt": 1709909160273,
      "copyCount": 1,
      "useCount": 1
    },
    {
      "value": "else if (options.find((opt) => opt.value === selectedValue)?.isCustomInput) {\r\n      const inputField = document.getElementById(`${fieldName}-input`);\r\n      if (inputField) {\r\n        inputField.focus();\r\n      }",
      "createdAt": 1709897405437,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 135,
            "character": 20
          },
          "end": {
            "line": 135,
            "character": 29
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      onclick = { setInputVal };\r\n    }\r\n    return option;\r\n  });",
      "createdAt": 1709908530158,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 176,
            "character": 2
          },
          "end": {
            "line": 181,
            "character": 5
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Flex, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n    ) => {\r\n      const selectedValue = event.target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={option.value}\r\n                    name={name}\r\n                    readOnly={false}\r\n                    value={option.value}\r\n                    checked={field.value === option.value}\r\n                    onClick={(e) => handleRadioChange(e, name)}\r\n                  />\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n\r\n\r\n",
      "createdAt": 1709897596249,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 176,
            "character": 2
          },
          "end": {
            "line": 176,
            "character": 2
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "/* eslint-disable react/no-unknown-property */\r\nimport { Flex, Input, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  isCustomInput: React.JSX.Element;\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLInputElement>,\r\n      fieldName: string,\r\n      isCustomInput?: boolean,\r\n    ) => {\r\n      const selectedValue = (event as React.ChangeEvent<HTMLInputElement>).target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n\r\n      if (isCustomInput) {\r\n        const inputField = document.getElementById(`${fieldName}-input`);\r\n        if (inputField) {\r\n          inputField.focus();\r\n        }\r\n      }\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                >\r\n                  {option.isCustomInput ? (\r\n                    <input\r\n                      value={field.value}\r\n                      onChange={(e) => setFieldValue(name, e.target.value)}\r\n                      // placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name)}\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  )}\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n",
      "createdAt": 1709896995814,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 137,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "{option.isCustomInput ? (\r\n                    <input\r\n                      value={field.value}\r\n                      onChange={(e) => setFieldValue(name, e.target.value)}\r\n                      // placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name)}\r\n                      style={{ marginRight: '0px' }}\r\n                    />\r\n                  )}",
      "createdAt": 1709896539183,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 81,
            "character": 18
          },
          "end": {
            "line": 99,
            "character": 20
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions = [\r\n    //1\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //2\r\n    { key: '_____', value: '_____' },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: '_____',\r\n      value: '_____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //3\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Improved Inventory management',\r\n      value: 'Cost Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //4\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n    //5\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //6\r\n    { key: '_____', value: '_____' },\r\n    //7\r\n    { key: 'CCTV surveillance', value: 'CCTV surveillance' },\r\n    {\r\n      key: 'Stock maintenance',\r\n      value: 'Stock maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly reconciliation',\r\n      value: 'Monthly reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const options1 = radioOptions.slice(0, 5);\r\n  const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return { ...option, isCustomInput: true };\r\n    }\r\n    return option;\r\n  });\r\n  const options3 = radioOptions.slice(10, 15);\r\n  const options4 = radioOptions.slice(15, 20);\r\n  const options5 = radioOptions.slice(20, 25);\r\n  const options6 = radioOptions.slice(25, 26);\r\n  const options7 = radioOptions.slice(26, 32);\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={options1}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={options2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirement From a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirements for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={options4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={options5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={options6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenties\"\r\n                        name=\"radioOption\"\r\n                        options={options7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewForm;\r\n",
      "createdAt": 1709889292754,
      "copyCount": 6,
      "useCount": 6,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 400,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Type '({ isCustomInput: boolean; key: string; value: string; } | undefined)[]' is not assignable to type 'option[]'.\r\n  Type '{ isCustomInput: boolean; key: string; value: string; } | undefined' is not assignable to type 'option'.\r\n    Type 'undefined' is not assignable to type 'option'.",
      "createdAt": 1709893225707,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 280,
            "character": 24
          },
          "end": {
            "line": 280,
            "character": 31
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{option.isCustomInput ? (\r\n                    <Input\r\n                      value={field.value}\r\n                      onChange={(e) => setFieldValue(name, e.target.value)}\r\n                      placeholder=\"Enter \"\r\n                      style={{ marginRight: '8px' }}\r\n                    />\r\n                  ) : (\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={option.value}\r\n                      name={name}\r\n                      readOnly={false}\r\n                      value={option.value}\r\n                      checked={field.value === option.value}\r\n                      onChange={(e) => handleRadioChange(e, name)}\r\n                    />\r\n                  )}",
      "createdAt": 1709892905994,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 81,
            "character": 18
          },
          "end": {
            "line": 98,
            "character": 20
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "(event as React.ChangeEvent<HTMLInputElement>).target.value;",
      "createdAt": 1709891783852,
      "copyCount": 3,
      "useCount": 3,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 86,
            "character": 46
          },
          "end": {
            "line": 86,
            "character": 46
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "Argument of type 'ChangeEvent<HTMLInputElement>' is not assignable to parameter of type 'ChangeEvent<HTMLInputElement> & MouseEvent'.\r\n  Type 'ChangeEvent<HTMLInputElement>' is missing the following properties from type 'MouseEvent': altKey, button, buttons, clientX, and 32 more.",
      "createdAt": 1709891261201,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 96,
            "character": 57
          },
          "end": {
            "line": 96,
            "character": 58
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "const options2 = radioOptions.slice(5, 10).map((option) => {\r\n    if (option.key === '_____' || option.key === 'others') {\r\n      return { ...option, isCustomInput: true };\r\n    }\r\n    return option;\r\n  });",
      "createdAt": 1709885911420,
      "copyCount": 4,
      "useCount": 4,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 175,
            "character": 2
          },
          "end": {
            "line": 180,
            "character": 5
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Flex, Stack, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, FieldProps, useFormikContext } from 'formik';\r\nimport React, { useCallback } from 'react';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface RadioGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst RadioButtons: React.FC<RadioGroupProps> = (props) => {\r\n  const { label, name, options } = props;\r\n  const { setFieldValue, submitForm } = useFormikContext();\r\n  const { incrementStep } = useStep();\r\n\r\n  const drop = useSpring({\r\n    from: { top: '1000px', opacity: 0 },\r\n    to: { top: '0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  });\r\n\r\n  const handleRadioChange = useCallback(\r\n    async (\r\n      event: React.ChangeEvent<HTMLInputElement> & MouseEvent,\r\n      fieldName: string,\r\n    ) => {\r\n      const selectedValue = event.target.value;\r\n      await setFieldValue(fieldName, selectedValue);\r\n      if (selectedValue.includes('.redirect')) {\r\n        submitForm();\r\n      } else {\r\n        incrementStep();\r\n      }\r\n    },\r\n    [setFieldValue, submitForm, incrementStep],\r\n  );\r\n  return (\r\n    <Flex\r\n      className=\"form-control\"\r\n      textAlign={'center'}\r\n      direction=\"column\"\r\n      gap=\"2rem\"\r\n      paddingX=\"1rem\"\r\n    >\r\n      <animated.span style={drop}>\r\n        <Label>{label}</Label>\r\n      </animated.span>\r\n      <Stack direction=\"row\" alignItems={'center'} alignSelf=\"center\">\r\n        <Field name={name}>\r\n          {({ field }: FieldProps) => {\r\n            return options.map((option) => {\r\n              return (\r\n                <Flex\r\n                  key={option.key}\r\n                  alignItems=\"center\"\r\n                  minW={'30%'}\r\n                  textAlign=\"center\"\r\n                  justifyContent=\"center\"\r\n                  _hover={{ boxShadow: '0px 3px 10px -2px hsla(150, 5%, 65%, 0.5)' }}\r\n                  minWidth={100}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={option.value}\r\n                    name={name}\r\n                    readOnly={false}\r\n                    value={option.value}\r\n                    checked={field.value === option.value}\r\n                    onClick={(e) => handleRadioChange(e, name)}\r\n                  />\r\n                  <label\r\n                    className=\"radio-label\"\r\n                    style={{\r\n                      color: 'white',\r\n                      width: '100%',\r\n                      boxShadow: 'none',\r\n                      margin: 0,\r\n                      paddingLeft: 8,\r\n                      paddingRight: 8,\r\n                    }}\r\n                    htmlFor={option.value}\r\n                  >\r\n                    <Text\r\n                      fontSize={{\r\n                        base: '13px',\r\n                        md: '18px',\r\n                        lg: '18px',\r\n                      }}\r\n                      _hover={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      {option.key}\r\n                    </Text>\r\n                  </label>\r\n                </Flex>\r\n              );\r\n            });\r\n          }}\r\n        </Field>\r\n      </Stack>\r\n      <ErrorMessage component={TextError} name={name} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default RadioButtons;\r\n",
      "createdAt": 1709888828963,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 117,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/RadioButtons.tsx"
      }
    },
    {
      "value": "const validationSchema = Yup.object({\r\n  email: Yup.string()\r\n    .email('Enter a valid email')\r\n    .when('reachOut', {\r\n      is: (reachOut: string) => reachOut === 'true',\r\n      then: Yup.string()\r\n        .required('Email is required')\r\n        .test('is-valid', 'Invalid email address', (value) =>\r\n          value ? isEmailValidator(value) : true,\r\n        ) as any,\r\n    }),\r\n  customInput: Yup.string().when(['reachOut', 'radioOption'], {\r\n    is: (values: string[]) =>\r\n      values[0] === 'true' && values[1] === 'others',\r\n    then: Yup.string().required('Custom input is required') as any,\r\n  }),\r\n});\r\n",
      "createdAt": 1709888128096,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 211,
            "character": 5
          },
          "end": {
            "line": 211,
            "character": 5
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "No overload matches this call.\r\n  Overload 1 of 4, '(keys: string | string[], builder: ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Argument of type 'readonly [\"reachOut\", \"radioOption\"]' is not assignable to parameter of type 'string | string[]'.\r\n      The type 'readonly [\"reachOut\", \"radioOption\"]' is 'readonly' and cannot be assigned to the mutable type 'string[]'.\r\n  Overload 2 of 4, '(keys: string | string[], options: ConditionConfig<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Argument of type 'readonly [\"reachOut\", \"radioOption\"]' is not assignable to parameter of type 'string | string[]'.",
      "createdAt": 1709887964356,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 207,
            "character": 35
          },
          "end": {
            "line": 207,
            "character": 71
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "No overload matches this call.\r\n  Overload 1 of 4, '(keys: string | string[], builder: ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Argument of type '{ is: (reachOut: string) => boolean; then: Yup.StringSchema<string, Yup.AnyObject, undefined, \"\">; }' is not assignable to parameter of type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n      Object literal may only specify known properties, and 'is' does not exist in type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n  Overload 2 of 4, '(keys: string | string[], options: ConditionConfig<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Type 'StringSchema<string, AnyObject, undefined, \"\">' is not assignable to type '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">) => ISchema<any, any, any, any>'.\r\n      Type 'StringSchema<string, AnyObject, undefined, \"\">' provides no match for the signature '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">): ISchema<any, any, any, any>'.",
      "createdAt": 1709887906206,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 211,
            "character": 7
          },
          "end": {
            "line": 211,
            "character": 7
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "customInput: Yup.string().when(['reachOut', 'radioOption'], {\r\n    is: (values: [string, string]) => values[0] === 'true' && values[1] === 'others',\r\n    then: Yup.string().required('Custom input is required'),\r\n  }),",
      "createdAt": 1709887717407,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 245,
            "character": 28
          },
          "end": {
            "line": 245,
            "character": 28
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "No overload matches this call.\r\n  Overload 1 of 4, '(keys: string | string[], builder: ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Argument of type '{ is: string; then: Yup.StringSchema<string | undefined, Yup.AnyObject, undefined, \"\">; }' is not assignable to parameter of type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n      Object literal may only specify known properties, and 'is' does not exist in type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n  Overload 2 of 4, '(keys: string | string[], options: ConditionConfig<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Type 'StringSchema<string | undefined, AnyObject, undefined, \"\">' is not assignable to type '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">) => ISchema<any, any, any, any>'.\r\n      Type 'StringSchema<string | undefined, AnyObject, undefined, \"\">' provides no match for the signature '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">): ISchema<any, any, any, any>'.",
      "createdAt": 1709887648286,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 208,
            "character": 19
          },
          "end": {
            "line": 214,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "No overload matches this call.\r\n  Overload 1 of 4, '(keys: string | string[], builder: ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Argument of type '{ is: string[]; then: Yup.StringSchema<string, Yup.AnyObject, undefined, \"\">; }' is not assignable to parameter of type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n      Object literal may only specify known properties, and 'is' does not exist in type 'ConditionBuilder<StringSchema<string | undefined, AnyObject, undefined, \"\">>'.\r\n  Overload 2 of 4, '(keys: string | string[], options: ConditionConfig<StringSchema<string | undefined, AnyObject, undefined, \"\">>): StringSchema<string | undefined, AnyObject, undefined, \"\">', gave the following error.\r\n    Type 'StringSchema<string, AnyObject, undefined, \"\">' is not assignable to type '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">) => ISchema<any, any, any, any>'.\r\n      Type 'StringSchema<string, AnyObject, undefined, \"\">' provides no match for the signature '(schema: StringSchema<string | undefined, AnyObject, undefined, \"\">): ISchema<any, any, any, any>'.",
      "createdAt": 1709887413023,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 208,
            "character": 17
          },
          "end": {
            "line": 211,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "return {...option, isCustomInput: true};",
      "createdAt": 1709884694249,
      "copyCount": 3,
      "useCount": 3,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 179,
            "character": 4
          },
          "end": {
            "line": 179,
            "character": 4
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },",
      "createdAt": 1709884224467,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 118,
            "character": 4
          },
          "end": {
            "line": 121,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "const options1 = radioOptions.slice(0,5);",
      "createdAt": 1709883984490,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 170,
            "character": 2
          },
          "end": {
            "line": 170,
            "character": 43
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "radioOption",
      "createdAt": 1709883544913,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 255,
            "character": 30
          },
          "end": {
            "line": 255,
            "character": 41
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{\r\n      key: 'Monthly reconciliation',\r\n      value: 'Monthly reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },",
      "createdAt": 1709882723340,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 151,
            "character": 4
          },
          "end": {
            "line": 158,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "//2\r\n    { key: '____', value: '_____' },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //3\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Improved Inventory management',\r\n      value: 'Cost Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    },\r\n    //4\r\n    { key: '0-500-1000', value: '0-500-1000' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },",
      "createdAt": 1709882483925,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 75,
            "character": 4
          },
          "end": {
            "line": 124,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "const radioOptions = [\r\n    {{ key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    }},{{ key: '____', value: '_____' },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: '____',\r\n      value: '____',\r\n    },\r\n    {\r\n      key: 'Others',\r\n      value: 'Others',\r\n    }}\r\n  ];\r\n",
      "createdAt": 1709882096742,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 57,
            "character": 2
          },
          "end": {
            "line": 92,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },",
      "createdAt": 1709881847005,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 59,
            "character": 4
          },
          "end": {
            "line": 62,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Clothing & Apparel",
      "createdAt": 1709715265912,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 60,
            "character": 12
          },
          "end": {
            "line": 60,
            "character": 30
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Food & Beverage",
      "createdAt": 1709715808378,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 58,
            "character": 12
          },
          "end": {
            "line": 58,
            "character": 27
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "const radioOptions = [\r\n    { key: 'Yes ! ', value: 'Yes.redirect' },\r\n    {\r\n      key: 'No, it can slow down operations',\r\n      value: 'No',\r\n    },\r\n  ];",
      "createdAt": 1709881681587,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 57,
            "character": 2
          },
          "end": {
            "line": 63,
            "character": 4
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "\r\n",
      "createdAt": 1709880426831,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 1,
            "character": 0
          },
          "end": {
            "line": 1,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "<PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />",
      "createdAt": 1709818443208,
      "copyCount": 6,
      "useCount": 6,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 207,
            "character": 14
          },
          "end": {
            "line": 211,
            "character": 16
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "what is schema",
      "createdAt": 1709812716305,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 169,
            "character": 15
          },
          "end": {
            "line": 169,
            "character": 15
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "import * as Yup from 'yup';",
      "createdAt": 1709810443306,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 6,
            "character": 0
          },
          "end": {
            "line": 6,
            "character": 27
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst FormContainer = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions = [\r\n    { key: 'Yes ! ', value: 'Yes.redirect' },\r\n    {\r\n      key: 'No, it can slow down operations',\r\n      value: 'No',\r\n    },\r\n  ];\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Do you want to get more visibility in your warehouse operations?\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Okay, get on a call to show you how we do it?\"\r\n                        name=\"reachOut\"\r\n                        options={[\r\n                          { key: 'Yes', value: 'true' },\r\n                          { key: 'No', value: 'false.redirect' },\r\n                        ]}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {values.reachOut === 'true' && (\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      )}\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n",
      "createdAt": 1709381282197,
      "copyCount": 6,
      "useCount": 6,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 222,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';",
      "createdAt": 1709809564339,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 11,
            "character": 50
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "import { CheckboxGroup, Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n  // const [selected, setSelected] = useState([]);\r\n\r\n  const handleRadioChange = (option) => {\r\n    if (selected.includes(option)) {\r\n      setSelected(selected.filter((item) => item !== option));\r\n    } else {\r\n      setSelected([...selected, option]);\r\n    }\r\n  };\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions2 = [\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions3 = [\r\n    { key: 'Kolkata', value: 'Kolkata' },\r\n    {\r\n      key: 'Bangluru',\r\n      value: 'Bangluru',\r\n    },\r\n    {\r\n      key: 'Chennai',\r\n      value: 'Chennai',\r\n    },\r\n    {\r\n      key: 'Noida',\r\n      value: 'Noida',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n  const radioOptions4 = [\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Saving',\r\n      value: 'Cost Saving',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions5 = [\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n  ];\r\n\r\n  const radioOptions6 = [\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n\r\n  const radioOptions7 = [{ key: '_____', value: '_____' }];\r\n\r\n  const checkboxOptions8 = [\r\n    { key: 'CCTV Surveillance', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Stock Maintenance',\r\n      value: 'Stock Maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly Reconciliation',\r\n      value: 'Monthly Reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirements from a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirement for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <CheckboxGroup\r\n                        label=\"Desired Amenities\"\r\n                        name=\"checkboxOption\"\r\n                        options={checkboxOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      }\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewForm;\r\n",
      "createdAt": 1709806652299,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 403,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}",
      "createdAt": 1709805748648,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 338,
            "character": 0
          },
          "end": {
            "line": 348,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { CheckboxGroup, Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n  const [selected, setSelected] = useState([]);\r\n\r\n  const handleCheckChange = (option) => {\r\n    if (selected.includes(option)) {\r\n      setSelected(selected.filter((item) => item !== option));\r\n    } else {\r\n      setSelected([...selected, option]);\r\n    }\r\n  };\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions2 = [\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions3 = [\r\n    { key: 'Kolkata', value: 'Kolkata' },\r\n    {\r\n      key: 'Bangluru',\r\n      value: 'Bangluru',\r\n    },\r\n    {\r\n      key: 'Chennai',\r\n      value: 'Chennai',\r\n    },\r\n    {\r\n      key: 'Noida',\r\n      value: 'Noida',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n  const radioOptions4 = [\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Saving',\r\n      value: 'Cost Saving',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions5 = [\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n  ];\r\n\r\n  const radioOptions6 = [\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n\r\n  const radioOptions7 = [{ key: '_____', value: '_____' }];\r\n\r\n  const checkboxOptions8 = [\r\n    { key: 'CCTV Surveillance', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Stock Maintenance',\r\n      value: 'Stock Maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly Reconciliation',\r\n      value: 'Monthly Reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirements from a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirement for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <CheckboxGroup\r\n                        label=\"Desired Amenities\"\r\n                        options={checkboxOptions8}\r\n                        onChange={handleCheckChange}\r\n                        selectedOptions={selected}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      }\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewForm;\r\n",
      "createdAt": 1709799482455,
      "copyCount": 6,
      "useCount": 6,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 404,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Box } from '@chakra-ui/react';\r\nimport { ErrorMessage, Field, FieldProps } from 'formik';\r\nimport React from 'react';\r\n\r\nimport Label from './Label';\r\nimport TextError from './TextError';\r\n\r\ntype option = {\r\n  value: string;\r\n  key: string;\r\n};\r\n\r\ninterface CheckBoxGroupProps {\r\n  label: string;\r\n  name: string;\r\n  options: option[];\r\n}\r\n\r\nconst CheckboxGroup: React.FC<CheckBoxGroupProps> = (props) => {\r\n  const { label, name, options, ...rest } = props;\r\n  return (\r\n    <Box className=\"form-control\">\r\n      <Label>{label}</Label>\r\n      <Field name={name}>\r\n        {({ field }: FieldProps) => {\r\n          return options.map((option) => {\r\n            return (\r\n              <Box key={option.key}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  {...field}\r\n                  {...rest}\r\n                  value={option.value}\r\n                  checked={field.value.includes(option.value)}\r\n                />\r\n                <label style={{ color: 'white' }} htmlFor={option.value}>\r\n                  {option.key}\r\n                </label>\r\n              </Box>\r\n            );\r\n          });\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CheckboxGroup;\r\n",
      "createdAt": 1709799232228,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 50,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/CheckboxGroup.tsx"
      }
    },
    {
      "value": " {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                        onChange={handleRadioChange}\r\n                        selectedOptions={selected}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}",
      "createdAt": 1709798870063,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 338,
            "character": 15
          },
          "end": {
            "line": 350,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "values.reachOut === 'true' && ",
      "createdAt": 1709798304687,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 172,
            "character": 23
          },
          "end": {
            "line": 172,
            "character": 53
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/FormContainer.tsx"
      }
    },
    {
      "value": "console.log(setSelected);",
      "createdAt": 1709797602246,
      "copyCount": 4,
      "useCount": 4,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 33,
            "character": 6
          },
          "end": {
            "line": 33,
            "character": 31
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": " const handleRadioChange = (option) => {\r\n    if (selected.includes(option)) {\r\n      setSelected(selected.filter((item) => item !== option));\r\n    } else {\r\n      setSelected([...selected, option]);\r\n    }\r\n  };",
      "createdAt": 1709796254985,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 30,
            "character": 1
          },
          "end": {
            "line": 36,
            "character": 4
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{currentStep === 8 && (\r\n        <>\r\n          <animated.span style={drop}>\r\n            {/* Replace RadioButtons with checkboxes */}\r\n            {radioOptions8.map((option, index) => (\r\n              <div key={index}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={`checkbox-${index}`}\r\n                  value={option}\r\n                  checked={selectedOptions.includes(option)}\r\n                  onChange={() => handleCheckboxChange(option)}\r\n                />\r\n                <label htmlFor={`checkbox-${index}`}>{option}</label>\r\n              </div>\r\n            ))}\r\n          </animated.span>\r\n        </>\r\n      )}",
      "createdAt": 1709795860381,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 351,
            "character": 34
          },
          "end": {
            "line": 351,
            "character": 34
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "const CheckboxGroup = ({ label, options, ...props }) => {\r\n  const [field, , helpers] = useField(props.name);\r\n\r\n  const handleCheckboxChange = (option) => {\r\n    const selectedOptions = field.value || [];\r\n    const updatedOptions = selectedOptions.includes(option)\r\n      ? selectedOptions.filter((item) => item !== option)\r\n      : [...selectedOptions, option];\r\n\r\n    helpers.setValue(updatedOptions);\r\n  };\r\n",
      "createdAt": 1709745855015,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 170,
            "character": 0
          },
          "end": {
            "line": 170,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "import { Flex, Input, Text } from '@chakra-ui/react';\r\nimport { animated, useSpring } from '@react-spring/web';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { PersistFormikValues } from 'formik-persist-values';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport isEmailValidator from 'validator/lib/isEmail';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useStep } from '../context/StepCountContext';\r\nimport Dropdown from './Dropdown';\r\nimport RadioButtons from './RadioButtons';\r\nimport SuccessAnimation from './SuccessAnimation';\r\n\r\ntype Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n\r\ntype initialType = {\r\n  dropdown: string;\r\n  email: string;\r\n  radioOption: string;\r\n  reachOut: string;\r\n};\r\n\r\nconst NewForm = () => {\r\n  const { currentStep, incrementStep } = useStep();\r\n  const [submitAnimation, setSubmitAnimation] = useState(false);\r\n\r\n  const [drop, api] = useSpring(() => ({\r\n    from: { marginTop: '-1000px', opacity: 0 },\r\n    to: { marginTop: '-0px', opacity: 1 },\r\n    config: { friction: 20 },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    api.start({\r\n      from: { marginTop: '-1000px', opacity: 0 },\r\n      to: { marginTop: '-0px', opacity: 1 },\r\n      config: { friction: 20 },\r\n    });\r\n  }, [currentStep, api]);\r\n\r\n  const dropdownOptions: Option[] = [\r\n    { label: 'Tally ERP', value: 'tally' },\r\n    { label: 'Oracle', value: 'oracleIndia' },\r\n    { label: 'Ramco Systems', value: 'ramcoSystems' },\r\n    { label: 'Epicor Software Corporation', value: 'epicor' },\r\n    { label: 'Zoho', value: 'zoho' },\r\n    { label: 'SAP', value: 'sap' },\r\n    { label: 'Oracle', value: 'oracle' },\r\n    { label: '3PL Central', value: '3plCentral' },\r\n    { label: 'Manhattan Associates', value: 'manhattanAssociates' },\r\n    { label: 'JDA Software', value: 'jdaSoftware' },\r\n    { label: 'Blue Yonder', value: 'blueYonder' },\r\n    { label: 'HighJump', value: 'highJump' },\r\n  ];\r\n  const radioOptions2 = [\r\n    { key: 'Food & Beverage', value: 'Food & Beverage' },\r\n    {\r\n      key: 'Clothing & Apparel',\r\n      value: 'Clothing & Apparel',\r\n    },\r\n    {\r\n      key: 'Electronics',\r\n      value: 'Electronics',\r\n    },\r\n    {\r\n      key: 'Pharmaceuticals',\r\n      value: 'Pharmaceuticals',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions3 = [\r\n    { key: 'Kolkata', value: 'Kolkata' },\r\n    {\r\n      key: 'Bangluru',\r\n      value: 'Bangluru',\r\n    },\r\n    {\r\n      key: 'Chennai',\r\n      value: 'Chennai',\r\n    },\r\n    {\r\n      key: 'Noida',\r\n      value: 'Noida',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n  const radioOptions4 = [\r\n    { key: 'Centralised distribution', value: 'Centralised distribution' },\r\n    {\r\n      key: 'Cost Saving',\r\n      value: 'Cost Saving',\r\n    },\r\n    {\r\n      key: 'Improved Inventory management',\r\n      value: 'Improved Inventory management',\r\n    },\r\n    {\r\n      key: 'Faster Delivery Times',\r\n      value: 'Faster Delivery Times',\r\n    },\r\n    {\r\n      key: 'Others_______',\r\n      value: 'Others_______',\r\n    },\r\n  ];\r\n  const radioOptions5 = [\r\n    { key: '0-500', value: '0-500' },\r\n    {\r\n      key: '500-1000',\r\n      value: '500-1000',\r\n    },\r\n    {\r\n      key: '1000-2000',\r\n      value: '1000-2000',\r\n    },\r\n    {\r\n      key: '2000-5000',\r\n      value: '2000-5000',\r\n    },\r\n    {\r\n      key: '5000 & Above',\r\n      value: '5000 & Above',\r\n    },\r\n  ];\r\n\r\n  const radioOptions6 = [\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];\r\n\r\n  const radioOptions7 = [{ key: '_____', value: '_____' }];\r\n\r\n  const radioOptions8 = [\r\n    { key: 'CCTV Surveillance', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Stock Maintenance',\r\n      value: 'Stock Maintenance',\r\n    },\r\n    {\r\n      key: 'Monthly Reconciliation',\r\n      value: 'Monthly Reconciliation',\r\n    },\r\n    {\r\n      key: 'Insurance tie up',\r\n      value: 'Insurance tie up',\r\n    },\r\n    {\r\n      key: 'Technology Integration',\r\n      value: 'Technology Integration',\r\n    },\r\n    {\r\n      key: '24/7 access',\r\n      value: '24/7 access',\r\n    },\r\n  ];\r\n\r\n  const initialValues: initialType = {\r\n    dropdown: '',\r\n    radioOption: '',\r\n    email: '',\r\n    reachOut: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email('Enter a valid email')\r\n      .when('reachOut', {\r\n        is: 'true',\r\n        then: (schema) =>\r\n          schema\r\n            .required('Email is required')\r\n            .test('is-valid', 'Invalid email address', (value) =>\r\n              value ? isEmailValidator(value) : true,\r\n            ),\r\n      }),\r\n  });\r\n\r\n  const onSubmit = useCallback(\r\n    async (values: initialType) => {\r\n      try {\r\n        setSubmitAnimation(true);\r\n\r\n        const response = await fetch('https://api-staging.storewise.in/lead_create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: new URLSearchParams(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.log(response.status);\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      } catch (e) {\r\n        setTimeout(() => {\r\n          window.location = 'https://storewise.in';\r\n        }, 2000);\r\n      }\r\n    },\r\n    [submitAnimation],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {submitAnimation ? (\r\n        <SuccessAnimation />\r\n      ) : (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched }) => (\r\n            <Form style={{ width: '100%' }}>\r\n              <Flex direction=\"column\" alignItems=\"center\" gap=\"6rem\">\r\n                {currentStep === 1 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex direction=\"column\" gap=\"2rem\">\r\n                      <Dropdown\r\n                        prompt=\"-- Select your ERP --\"\r\n                        onChange={() => incrementStep()}\r\n                        name=\"dropdown\"\r\n                        label=\"dropdown\"\r\n                        options={dropdownOptions}\r\n                      />\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n\r\n                {currentStep === 2 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Type of Product\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions2}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 3 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"All Locations of Business\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions3}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 4 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Key Requirements from a Central Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions4}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 5 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Size Requirement for Warehouse\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions5}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 6 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Preferred Lease Duration\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions6}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 7 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Typical Delivery Frequency\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions7}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}\r\n\r\n                {currentStep === 9 && (\r\n                  <animated.span style={drop}>\r\n                    <Flex gap=\"6rem\" direction=\"column\">\r\n                      {\r\n                        <Flex direction=\"column\" alignItems=\"center\" gap=\"2rem\">\r\n                          <Field\r\n                            as={Input}\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <Input\r\n                                  {...field}\r\n                                  type={'email'}\r\n                                  _focusVisible={{ borderWidth: 0 }}\r\n                                  borderWidth={0}\r\n                                  color=\"white\"\r\n                                  width={{ base: '400px', md: '700px' }}\r\n                                  height={{ base: '50px', md: '60px', lg: '65px' }}\r\n                                  fontSize={{ base: '18px', md: '24px', lg: '28px' }}\r\n                                  placeholder=\"Enter your email here\"\r\n                                />\r\n                              );\r\n                            }}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                          />\r\n                          {touched.email && errors.email && (\r\n                            <ErrorMessage component=\"div\" name=\"email\" />\r\n                          )}\r\n                          {!errors.email && (\r\n                            <Text color={'#eeeee4'}>\r\n                              That looks good! Press <b>Enter</b> to submit\r\n                            </Text>\r\n                          )}\r\n                        </Flex>\r\n                      }\r\n                    </Flex>\r\n                  </animated.span>\r\n                )}\r\n              </Flex>\r\n              <PersistFormikValues\r\n                name=\"actualization-lead-form\"\r\n                storage=\"sessionStorage\"\r\n                persistInvalid={true}\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewForm;\r\n",
      "createdAt": 1709745413987,
      "copyCount": 4,
      "useCount": 4,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 394,
            "character": 0
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": " {currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}",
      "createdAt": 1709794360886,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 329,
            "character": 15
          },
          "end": {
            "line": 339,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": " onChange={handleRadioChange}\r\n              selectedOptions={selectedOptions}",
      "createdAt": 1709744079461,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 184,
            "character": 39
          },
          "end": {
            "line": 184,
            "character": 39
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{currentStep === 8 && (\r\n                  <>\r\n                    <animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>\r\n                )}",
      "createdAt": 1709733982472,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 329,
            "character": 16
          },
          "end": {
            "line": 339,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "<animated.span style={drop}>\r\n                      <RadioButtons\r\n                        label=\"Desired Amenities\"\r\n                        name=\"radioOption\"\r\n                        options={radioOptions8}\r\n                      />\r\n                    </animated.span>\r\n                  </>",
      "createdAt": 1709733581894,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 331,
            "character": 20
          },
          "end": {
            "line": 338,
            "character": 21
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "500-1000",
      "createdAt": 1709717005500,
      "copyCount": 4,
      "useCount": 4,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 117,
            "character": 12
          },
          "end": {
            "line": 117,
            "character": 20
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "0-500'",
      "createdAt": 1709716997503,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 115,
            "character": 12
          },
          "end": {
            "line": 115,
            "character": 18
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "const radioOptions6 = [\r\n    { key: 'Seasonal Requirement', value: 'Seasonal Requirement' },\r\n    {\r\n      key: 'Adhoc',\r\n      value: 'Adhoc',\r\n    },\r\n    {\r\n      key: 'Dynamic',\r\n      value: 'Dynamic',\r\n    },\r\n    {\r\n      key: 'Fixed/Long term',\r\n      value: 'Fixed/Long term',\r\n    },\r\n    {\r\n      key: 'Others_____',\r\n      value: 'Others_____',\r\n    },\r\n  ];",
      "createdAt": 1709716887289,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 134,
            "character": 2
          },
          "end": {
            "line": 152,
            "character": 4
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "    { key: 'CCTV Surveillance', value: 'Seasonal Requirement' },\r\n",
      "createdAt": 1709716868265,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 155,
            "character": 22
          },
          "end": {
            "line": 155,
            "character": 22
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Stock Maintenance",
      "createdAt": 1709716860249,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 157,
            "character": 12
          },
          "end": {
            "line": 157,
            "character": 29
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "onthly Reconciliation",
      "createdAt": 1709716847724,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 161,
            "character": 13
          },
          "end": {
            "line": 161,
            "character": 34
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Insurance tie up",
      "createdAt": 1709716838239,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 165,
            "character": 12
          },
          "end": {
            "line": 165,
            "character": 28
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Technology Integration",
      "createdAt": 1709716831214,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 169,
            "character": 12
          },
          "end": {
            "line": 169,
            "character": 34
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "24/7 access",
      "createdAt": 1709716823209,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 173,
            "character": 12
          },
          "end": {
            "line": 173,
            "character": 23
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "{\r\n      key: 'Technology Integration',\r\n      value: 'Others_____',\r\n    },",
      "createdAt": 1709716804669,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 168,
            "character": 4
          },
          "end": {
            "line": 171,
            "character": 6
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Fixed/Long term",
      "createdAt": 1709716637259,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 145,
            "character": 12
          },
          "end": {
            "line": 145,
            "character": 27
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Seasonal Requirement",
      "createdAt": 1709716594679,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 135,
            "character": 12
          },
          "end": {
            "line": 135,
            "character": 32
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Faster Delivery Times",
      "createdAt": 1709716236808,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 106,
            "character": 12
          },
          "end": {
            "line": 106,
            "character": 33
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Inventory management",
      "createdAt": 1709716210743,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 102,
            "character": 21
          },
          "end": {
            "line": 102,
            "character": 41
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Cost Saving",
      "createdAt": 1709716170999,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 98,
            "character": 12
          },
          "end": {
            "line": 98,
            "character": 23
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Centralised distribution",
      "createdAt": 1709716157488,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 96,
            "character": 12
          },
          "end": {
            "line": 96,
            "character": 36
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "All Locations of Business",
      "createdAt": 1709715608035,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 184,
            "character": 31
          },
          "end": {
            "line": 184,
            "character": 56
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "Others_______",
      "createdAt": 1709715366628,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 69,
            "character": 12
          },
          "end": {
            "line": 69,
            "character": 25
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/components/NewForm.tsx"
      }
    },
    {
      "value": "port FormContainer from './components/FormContainer';",
      "createdAt": 1709381138372,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 3,
            "character": 2
          },
          "end": {
            "line": 3,
            "character": 55
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-info/src/App.tsx"
      }
    },
    {
      "value": "http://localhost:3000/map",
      "createdAt": 1709378981863,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 18,
            "character": 28
          },
          "end": {
            "line": 18,
            "character": 28
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/_components/map-controller.tsx"
      }
    },
    {
      "value": "flyTo",
      "createdAt": 1709378236409,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 20,
            "character": 8
          },
          "end": {
            "line": 20,
            "character": 13
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/_components/map-controller.tsx"
      }
    },
    {
      "value": "updateLocations",
      "createdAt": 1709378061154,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 33,
            "character": 8
          },
          "end": {
            "line": 33,
            "character": 23
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/page.tsx"
      }
    },
    {
      "value": "localhost:3000 is not opening in the port?",
      "createdAt": 1709377152907,
      "copyCount": 2,
      "useCount": 2,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 51,
            "character": 20
          },
          "end": {
            "line": 52,
            "character": 8
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/page.tsx"
      }
    },
    {
      "value": "import { LatLngTuple } from 'leaflet';\nimport { FC, useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\ninterface Location {\n  lat: number;\n  long: number;\n  name?: string;\n}\n\ninterface Review {\n  coord: LatLngTuple;\n  selectedLocations: Location[];\n}\n\nconst MapController: FC<{ selectedMarker: Review | null }> = ({ selectedMarker }) => {\n  const map = useMap();\n  const flyToDuration = 1.5;\n\n  const flyTo = (location: LatLngTuple) => {\n    map.flyTo(location, 15, {\n      animate: true,\n      duration: flyToDuration,\n    });\n  };\n\n  const flyToCenter = () => {\n    map.flyTo([59.914, 10.734], 13, {\n      animate: true,\n      duration: flyToDuration,\n    });\n  };\n\n  useEffect(() => {\n    if (selectedMarker && selectedMarker.coord) {\n      flyTo(selectedMarker.coord);\n    } else {\n      flyToCenter();\n    }\n  }, [selectedMarker, map]);\n\n  return null;\n};\n\nexport { MapController };",
      "createdAt": 1709226055620,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 1,
            "character": 0
          },
          "end": {
            "line": 45,
            "character": 25
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/_components/map-controller.tsx"
      }
    },
    {
      "value": "Type '() => LatLngTuple | { lat: number; long: number; }' is not assignable to type 'LatLngExpression | undefined'.ts(2322)\nindex.d.ts(2457, 5): The expected type comes from property 'center' which is declared here on type 'IntrinsicAttributes & MapContainerProps & RefAttributes<Map>'",
      "createdAt": 1709222457685,
      "copyCount": 1,
      "useCount": 1,
      "language": "typescriptreact",
      "createdLocation": {
        "range": {
          "start": {
            "line": 51,
            "character": 10
          },
          "end": {
            "line": 51,
            "character": 10
          }
        },
        "uri": "file:///home/coder/storewise-webapps/storewise-skemengine/app/%28partner-interest%29/map/_components/map-viewer.tsx"
      }
    }
  ]
}